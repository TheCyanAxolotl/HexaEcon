@file:Suppress("SpellCheckingInspection", "SameParameterValue")

package space.kiyoshi.hexaecon

import org.bukkit.Bukkit
import org.bukkit.configuration.file.FileConfiguration
import org.bukkit.configuration.file.YamlConfiguration
import org.bukkit.plugin.java.JavaPlugin
import space.kiyoshi.hexaecon.commands.Eco
import space.kiyoshi.hexaecon.events.AnimalsDeath
import space.kiyoshi.hexaecon.events.EventsListener
import space.kiyoshi.hexaecon.events.JoinEvent
import space.kiyoshi.hexaecon.events.MonsterDeath
import space.kiyoshi.hexaecon.sql.MySQL
import space.kiyoshi.hexaecon.utils.HexaEconPlaceHolders
import space.kiyoshi.hexaecon.utils.KiyoshiLogger
import space.kiyoshi.hexaecon.utils.NMSUtils
import space.kiyoshi.hexaecon.wallet.commands.Wallet
import java.io.File
import java.io.IOException
import java.util.logging.Level
import java.util.logging.LogRecord
import kotlin.properties.Delegates

class HexaEcon : JavaPlugin() {
    private val nms = NMSUtils
    private var lang = File(dataFolder, "language")
    private var languagefile = File("$dataFolder/language/language.yml")
    private var languageconfig: FileConfiguration = YamlConfiguration.loadConfiguration(languagefile)
    private fun initialize() {
        saveDefaultConfig()
        config.options().copyDefaults(true)
        if(nms.checkServerVersion(nms.getCleanServerVersion())){
            KiyoshiLogger.log(LogRecord(Level.INFO, "Running HexaEcon on spigot version ${nms.getCleanServerVersion()}"), "HexaEconSupport")
            config.options().copyHeader(true)
        } else {
            KiyoshiLogger.log(LogRecord(Level.INFO, "Running HexaEcon on spigot version ${nms.getCleanServerVersion()}"), "HexaEconSupport")
            config.options().parseComments(true)
        }
        plugin = this
    }

    private fun configs() {
        if (!lang.exists()) {
            lang.mkdir()
        }
        if (!languagefile.exists()) {
            try {
                languagefile.createNewFile()
                languageconfig.createSection("Formatted")
                languageconfig["Formatted.Amount"] = "&e%amount&6%symbol"
                languageconfig.createSection("Language")
                languageconfig["Language.Prefix"] = "&e[&9HexaEcon&e]&r "
                languageconfig["Language.IsConsolePlayer"] = "&esorry but you cannot execute this command in console."
                languageconfig["Language.BankAmount"] = "&eyou have &6%amount &e%valuename."
                languageconfig["Language.GenericEarn"] = "&e+ &6%amount &e%valuename."
                languageconfig["Language.ConfigurationReloaded"] = "&econfiguration files successfully reloaded."
                languageconfig["Language.GenerateToOther"] = "&e+ &6%amount &e%valuename  generated by &6%p"
                languageconfig["Language.AccessDenied"] = "&eyou don't access to this command permission required: &6%perm"
                languageconfig["Language.InvalidAmount"] = "&erequired minimum &61 &e%valuename &eor check if is a valid number."
                languageconfig["Language.WalletWithdrawAmount"] = "&e- &6%amount &e%valuename."
                languageconfig["Language.PlayerNotFound"] = "&eplayer &6%p &enot found or not online."
                languageconfig["Language.WalletWithdrawConverted"] = "&6%amount &e%valuename converted."
                languageconfig["Language.WalletWithdrawRemaningAmount"] = "&ethey still remain %valuename &6%amount."
                languageconfig["Language.WalletWithdrawNoEnoughAmount"] = "&eyou don't have enough %valuename, you have &6%amount &e%valuename."
                languageconfig["Language.UsageFormat"] = "&eUsage: %u"
                languageconfig.createSection("Usages")
                languageconfig["Usages.EconConvertDeposit"] = "&e/wallet [generate/withdraw] <amount>"
                languageconfig.save(languagefile)
            } catch (_: IOException) {
                KiyoshiLogger.log(LogRecord(Level.SEVERE, "[Error] Error while creating language file."), "HexaEcon")
            }
        }
        getLanguages().options().copyDefaults(true)
        saveLanguages()
    }

    private fun database() {
        val cansetupdatabase = config.getString("MySQL.Host")!!
        if(cansetupdatabase.isEmpty() || cansetupdatabase.isBlank() || cansetupdatabase.equals(null)){
            val worlds = Bukkit.getWorlds()
            for(world in worlds){
                world.save()
            }
            KiyoshiLogger.log(LogRecord(Level.WARNING, "[MySQL] You need to connect MySQL database to use the plugin, check the config.yml"), "HexaEcon")
            server.shutdown()
        } else {
            val worlds = Bukkit.getWorlds()
            for(world in worlds){
                world.save()
            }
            SQL = MySQL()
            SQL?.connect()
            if (SQL?.isConnected == true) {
                KiyoshiLogger.log(LogRecord(Level.INFO, "[MySQL] pulling mysql requests frin HexaEcon [OK]"), "HexaEcon")
            }
        }
    }

    private fun events() {
        server.pluginManager.registerEvents(MonsterDeath(), this)
        server.pluginManager.registerEvents(AnimalsDeath(), this)
        server.pluginManager.registerEvents(JoinEvent(), this)
        server.pluginManager.registerEvents(EventsListener(), this)
    }

    private fun commands() {
        getCommand("eco")!!.setExecutor(Eco())
        getCommand("wallet")!!.setExecutor(Wallet())
    }

    override fun onEnable() {
        initialize()
        configs()
        database()
        events()
        commands()
        PAPI = server.pluginManager.getPlugin("PlaceholderAPI") != null
        if (PAPI) {
            KiyoshiLogger.log(LogRecord(Level.INFO, "PlaceholderAPI found."), "HexaEcon")
            if (Bukkit.getPluginManager().isPluginEnabled("PlaceholderAPI")) {
                HexaEconPlaceHolders().register()
            } else {
                KiyoshiLogger.log(LogRecord(Level.INFO, "PlaceholderAPI found but not enabled."), "HexaEcon")
            }
        } else {
            KiyoshiLogger.log(LogRecord(Level.SEVERE, "PlaceholderAPI not found."), "HexaEcon")
        }
        printBanner()
    }

    override fun onDisable() {
        SQL = MySQL()
        try {
            SQL!!.disconnect()
        } catch (_: ClassNotFoundException) {}

    }

    companion object {
        var plugin: HexaEcon by Delegates.notNull()
        var SQL: MySQL? = null
        var PAPI = false
    }

    private fun printBanner(){
        KiyoshiLogger.log(LogRecord(Level.INFO, "           HexaEcon by TheUwUAxolotl        "), "HexaEcon")
        KiyoshiLogger.log(LogRecord(Level.INFO, "***********************************************"), "HexaEcon")
        KiyoshiLogger.log(LogRecord(Level.INFO, "*                                             *"), "HexaEcon")
        KiyoshiLogger.log(LogRecord(Level.INFO, "*          HexaEcon has been enabled         *"), "HexaEcon")
        KiyoshiLogger.log(LogRecord(Level.INFO, "*                                             *"), "HexaEcon")
        KiyoshiLogger.log(LogRecord(Level.INFO, "***********************************************"), "HexaEcon")
    }

    fun getLanguages(): FileConfiguration {
        return  languageconfig
    }

    private fun saveLanguages(){
        try {
            languageconfig.save(languagefile)
        } catch (e: IOException) {
            KiyoshiLogger.log(LogRecord(Level.SEVERE, "Could not save language configuration"), "HexaEcon")
        }
    }

    fun reloadLanguages() {
        languageconfig = YamlConfiguration.loadConfiguration(languagefile)
    }

}